почитай на досуге что такое JSON Path
get забирает
post - создает

ДЗ_2 Postman
=====

=====

1) необходимо залогиниться
POST
http://162.55.220.72:5005/login
Body
login : str (кроме /)
password : str

Приходящий токен необходимо передать во все остальные запросы.

Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

 var resp_JSON = pm.response.json();
pm.environment.set ("token", resp_JSON.token);

===================
дальше все запросы требуют наличие токена.
===================

2) http://162.55.220.72:5005/user_info
req. (RAW JSON)
POST
age: int
salary: int
name: str
auth_token


resp.
{'start_qa_salary':salary,
 'qa_salary_after_6_months': salary * 2,
 'qa_salary_after_12_months': salary * 2.9,
 'person': {'u_name':[user_name, salary, age],
                                'u_age':age,
                                'u_salary_1.5_year': salary * 4}
                                }

Тесты:
1) Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

2) Проверка структуры json в ответе.
var schema = 
{
  "type": "object",
  "properties": {
    "person": {"type": "object",
      "properties": {
        "u_age": {"type": "integer"},
        "u_name": {
          "type": "array",
          "items": [
            {"type": "string"},
            {"type": "integer"},
            {"type": "integer"}
          ]
        },
        "u_salary_1_5_year": {"type": "integer"}
      },
      "required": ["u_age", "u_name", "u_salary_1_5_year"]
    },
    "qa_salary_after_12_months": {"type": "number"},
    "qa_salary_after_6_months": {"type": "integer"},
    "start_qa_salary": {"type": "integer"}
  },
  "required": ["person", "qa_salary_after_12_months", "qa_salary_after_6_months", "start_qa_salary"]
}
pm.test("validate schema", () => {
    pm.response.to.have.jsonSchema(schema);
});

3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
pm.test("salary after 6 month", function () {
    pm.expect(+responseBody.qa_salary_after_6_months).to.eql(salary*2);
});

//3 пункт, вторая часть
pm.test("salary after 12 month", function () {
    pm.expect(+responseBody.qa_salary_after_12_months).to.eql(salary*2.9);
});

4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user
pm.environment.set("salary_task_5", responseBody.person.u_salary_1_5_year)

===================

3) http://162.55.220.72:5005/new_data
req.
POST
Body
age: int
salary: int
name: str
auth_token

Resp.
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}


Тесты:

var salary = pm.environment.get("salary")
var responseBody = pm.response.json()


1) Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

2) Проверка структуры json в ответе.
var schema = 
{
  "type": "object",
  "properties": {
    "age": {"type": "integer"},
    "name": {"type": "string"},
    "salary": {"type": "array",
      "items": [
        {"type": "integer"},
        {"type": "string"},
        {"type": "string"}
      ]
    }
  },
  "required": [
    "age",
    "name",
    "salary"
  ]
}

pm.test("validate schema", () => {
    pm.response.to.have.jsonSchema(schema);
});

3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
pm.test("salary2", function () {
    pm.expect(+responseBody.salary[1]).to.eql(salary*2); //сравниваем вторю зарплату (2000) с зарплатой из запроса умноженной на 2
});

//3 пункт, вторая часть
pm.test("salary3", function () {
    pm.expect(+responseBody.salary[2]).to.eql(salary*3); //сравниваем третью зарплату (3000) с зарплатой из запроса умноженной на 3
});


4) проверить, что 2-й элемент массива salary больше 1-го и 0-го
pm.test("salary[2] is more than salary[0] and more than salary[0]", function () {
    pm.expect(+responseBody.salary[0]).to.be.below(+responseBody.salary[2]); //убеждаемся что третья зп больше чем первая
    pm.expect(+responseBody.salary[1]).to.be.below(+responseBody.salary[2]); //убеждаемся что третья зп больше чем вторая
});

===================

4) http://162.55.220.72:5005/test_pet_info
req.
POST
age: int
weight: int
name: str
auth_token


Resp.
{'name': name,
 'age': age,
 'daily_food':weight * 0.012,
 'daily_sleep': weight * 2.5}


Тесты:
1) Статус код 200
var responseBody = pm.response.json()
var weight = pm.environment.get("weight")

// Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

2) Проверка структуры json в ответе.
var schema = 
{
  "type": "object",
  "properties": {
    "age": {"type": "integer"},
    "daily_food": {"type": "number"},
    "daily_sleep": {"type": "number"},
    "name": {"type": "string"}
  },
  "required": ["age", "daily_food", "daily_sleep", "name"]
}

pm.test("validate schema", () => {
    pm.response.to.have.jsonSchema(schema);
});

3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.
pm.test("daily_food=weight0.012", function () {
    pm.expect(+responseBody.daily_food).to.eql(weight*0.012); 
});

//3 пункт, вторая часть
pm.test("daily_sleep=weight2.5", function () {
    pm.expect(+responseBody.daily_sleep).to.eql(weight*2.5); 
});

===================

5) http://162.55.220.72:5005/get_test_user
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name': name,
 'age':age,
 'salary': salary,
 'family':{'children':[['Alex', 24],['Kate', 12]],
 'u_salary_1.5_year': salary * 4}
  }

Тесты:
1) Статус код 200
var responseBody = pm.response.json()
var name = pm.environment.get("name")  // получить из окружения
var age = pm.environment.get("age")

// Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

2) Проверка структуры json в ответе.
var schema = 
{
  "type": "object",
  "properties": {
    "age": {"type": "string"},
    "family": {"type": "object",
      "properties": {
        "children": {"type": "array",
          "items": [
            {"type": "array",
              "items": [
                {"type": "string"},
                {"type": "integer"}
              ]
            },
            {"type": "array",
              "items": [
                {"type": "string"},
                {"type": "integer"}
              ]
            }
          ]
        },
        "u_salary_1_5_year": {"type": "integer"}
      },
      "required": ["children", "u_salary_1_5_year"]
    },
    "name": {"type": "string"},
    "salary": {"type": "integer"}
  },
  "required": ["age", "family", "name", "salary"]
}

pm.test("validate schema", () => {
    pm.response.to.have.jsonSchema(schema);
});


3) Проверить что занчение поля name = значению переменной name из окружения

pm.test("response.name=environment.name", function () {
    pm.expect(responseBody.name).to.eql(name); 
});

4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age
pm.test("response.age=environment.age", function () {
    pm.expect(responseBody.age).to.eql(age); 
});

===================

6) http://162.55.220.72:5005/currency
req.
POST
auth_token

//Передаётся список массив объектов.
//[
//{"Cur_Abbreviation": str,
 "Cur_ID" : int,
 "Cur_Name": str
//}
//…
//{"Cur_Abbreviation": str,
//"Cur_ID": int,
// "Cur_Name": str
//}
//]


var array_response = pm.response.json()  
var array_length = array_response.length // -кол-во объектов (валют) в респонсе  length  - длина (кол-во элементов)  массива

//Можете взять любой объект из присланного списка, используйте js random.
random_id = Math.floor(Math.random() * array_length); //
random_currency = array_response[random_id]

//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.
pm.environment.set("curr_code", random_currency["Cur_ID"])

Тесты:
1) Можете взять любой объект из присланного списка, используйте js random.
В объекте возьмите Cur_ID и передать через окружение в следующий запрос.

 ===================
